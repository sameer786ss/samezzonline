---
import Layout from '~/layouts/PageLayout.astro';
import HeroText from '~/components/widgets/HeroText.astro';
---

<Layout metadata={{ title: 'Login' }}>
  <HeroText tagline="Login" title="Welcome Back!" />
  <div
    class="flex flex-col max-w-xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8 w-full"
  >
    <div id="login-form-container">
      <form id="login-form">
        <div class="mb-4">
          <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-slate-800 dark:border-gray-600 dark:text-white"
          />
        </div>
        <div class="mb-6">
          <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-slate-800 dark:border-gray-600 dark:text-white"
          />
        </div>
        <div class="flex items-center justify-between mb-4">
          <a href="/forgot-password" class="text-sm text-blue-600 hover:underline dark:text-blue-400"
            >Forgot password?</a
          >
        </div>
        <div id="error-message" class="hidden text-red-500 text-sm mb-4"></div>
        <button
          type="submit"
          class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >Login</button
        >
      </form>
    </div>
    <div class="mt-4">
      <button id="google-signin" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
        Sign in with Google
      </button>
    </div>
    <div class="mt-4">
      <button id="phone-signin" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
        Sign in with Mobile Number
      </button>
    </div>
    <div id="phone-form-container" class="hidden mt-4">
      <div class="flex mb-4">
        <select id="isd-code-input" class="block w-1/4 px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-slate-800 dark:border-gray-600 dark:text-white">
          <option value="+91">+91</option>
          <option value="+1">+1</option>
        </select>
        <input
          type="tel"
          id="phone-number"
          name="phone-number"
          class="block w-3/4 px-3 py-2 border border-gray-300 rounded-r-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-slate-800 dark:border-gray-600 dark:text-white"
          placeholder="Enter your phone number"
        />
      </div>
      <div id="phone-error-message" class="hidden text-red-500 text-sm mb-4"></div>
      <div id="recaptcha-container"></div>
      <button id="send-code" class="w-full flex justify-center py-2 px-4 mt-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
        Send Code
      </button>
      <div class="hidden mt-4" id="verification-code-container">
        <div class="mb-4">
          <label for="verification-code" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Verification Code</label>
          <input
            type="text"
            id="verification-code"
            name="verification-code"
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-slate-800 dark:border-gray-600 dark:text-white"
          />
        </div>
        <button id="verify-code" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
          Verify Code
        </button>
      </div>
    </div>
    <p class="text-center text-sm text-gray-500 mt-4">
      Don't have an account? 
      <a href="/register" class="text-blue-600 hover:underline dark:text-blue-400">Sign up</a>
    </p>
  </div>
</Layout>

<script type="module">
  import { db, auth } from '../lib/firebase.ts?import';
  import { collection, query, where, getDocs, addDoc } from 'https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js';
  import { GoogleAuthProvider, signInWithPopup, RecaptchaVerifier, signInWithPhoneNumber, signInWithEmailAndPassword } from 'https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js';

  const form = document.querySelector('#login-form');
  const errorMessage = document.querySelector('#error-message');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorMessage.classList.add('hidden');

    const email = form.email.value;
    const password = form.password.value;

    if (!email || !password) {
      errorMessage.textContent = 'Please enter both email and password.';
      errorMessage.classList.remove('hidden');
      return;
    }

    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      
      const q = query(collection(db, 'users'), where('email', '==', email));
      const querySnapshot = await getDocs(q);
      
      if (!querySnapshot.empty) {
        const userData = querySnapshot.docs[0].data();
        localStorage.setItem('loggedInUser', JSON.stringify(userData));
        window.location.href = '/';
      } else {
        errorMessage.textContent = 'Invalid email or password.';
        errorMessage.classList.remove('hidden');
      }
    } catch (error) {
      console.error('Error logging in:', error);
      if (error.code === 'auth/wrong-password' || error.code === 'auth/user-not-found') {
        errorMessage.textContent = 'Invalid email or password.';
      } else {
        errorMessage.textContent = 'An unexpected error occurred. Please try again.';
      }
      errorMessage.classList.remove('hidden');
    }
  });

  const googleSignInButton = document.querySelector('#google-signin');
  googleSignInButton.addEventListener('click', async () => {
    const provider = new GoogleAuthProvider();
    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      const q = query(collection(db, 'users'), where('email', '==', user.email));
      const querySnapshot = await getDocs(q);
       if (querySnapshot.empty) {
        await addDoc(collection(db, 'users'), {
            name: user.displayName,
            email: user.email,
        });
       }
      localStorage.setItem('loggedInUser', JSON.stringify({ name: user.displayName, email: user.email }));
      window.location.href = '/';
    } catch (error) {
      console.error('Error with Google Sign-In:', error);
    }
  });

  const phoneSignInButton = document.querySelector('#phone-signin');
  const phoneFormContainer = document.querySelector('#phone-form-container');
  const loginFormContainer = document.querySelector('#login-form-container');
  const sendCodeButton = document.querySelector('#send-code');
  const verifyCodeButton = document.querySelector('#verify-code');
  const phoneErrorMessage = document.querySelector('#phone-error-message');
  const verificationCodeContainer = document.querySelector('#verification-code-container');

  let recaptchaVerifier = null;

  phoneSignInButton.addEventListener('click', () => {
      loginFormContainer.classList.add('hidden');
      phoneFormContainer.classList.remove('hidden');
  });

  function setupRecaptcha() {
    if (!recaptchaVerifier) {
        recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
            'size': 'invisible',
            'callback': (response) => {
                // reCAPTCHA solved, allow send-code button to be clicked.
            },
        });
    }
  }

  sendCodeButton.addEventListener('click', async () => {
      setupRecaptcha();
      const isdCode = document.querySelector('#isd-code-input').value;
      const phoneNumber = document.querySelector('#phone-number').value;
      const fullPhoneNumber = isdCode + phoneNumber;
      const appVerifier = recaptchaVerifier;
      sendCodeButton.disabled = true;
      sendCodeButton.textContent = 'Sending...';
      phoneErrorMessage.classList.add('hidden');

      try {
          const confirmationResult = await signInWithPhoneNumber(auth, fullPhoneNumber, appVerifier);
          window.confirmationResult = confirmationResult;
          verificationCodeContainer.classList.remove('hidden');
          sendCodeButton.textContent = 'Code Sent';
      } catch (error) {
          console.error('Error sending verification code:', error);
          phoneErrorMessage.textContent = 'Error sending verification code. Please try again.';
          phoneErrorMessage.classList.remove('hidden');
          sendCodeButton.disabled = false;
          sendCodeButton.textContent = 'Send Code';
          recaptchaVerifier.render().then(function(widgetId) {
            grecaptcha.reset(widgetId);
          });
      }
  });

  verifyCodeButton.addEventListener('click', async () => {
      const code = document.querySelector('#verification-code').value;
      verifyCodeButton.disabled = true;
      verifyCodeButton.textContent = 'Verifying...';
      phoneErrorMessage.classList.add('hidden');

      try {
          const result = await window.confirmationResult.confirm(code);
          const user = result.user;
          const q = query(collection(db, 'users'), where('phoneNumber', '==', user.phoneNumber));
          const querySnapshot = await getDocs(q);
          if (querySnapshot.empty) {
            await addDoc(collection(db, 'users'), {
                phoneNumber: user.phoneNumber,
            });
          }
          localStorage.setItem('loggedInUser', JSON.stringify({ phoneNumber: user.phoneNumber }));
          window.location.href = '/';
      } catch (error) {
          console.error('Error verifying code:', error);
          phoneErrorMessage.textContent = 'Invalid verification code. Please try again.';
          phoneErrorMessage.classList.remove('hidden');
          verifyCodeButton.disabled = false;
          verifyCodeButton.textContent = 'Verify Code';
      }
  });
</script>
